use crate::traits::GenericOpcode;

#[repr(u8)]
#[allow(non_camel_case_types)]
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Opcode {
    POP_TOP = 1,
    ROT_TWO = 2,
    ROT_THREE = 3,
    DUP_TOP = 4,
    DUP_TOP_TWO = 5,
    ROT_FOUR = 6,
    NOP = 9,
    UNARY_POSITIVE = 10,
    UNARY_NEGATIVE = 11,
    UNARY_NOT = 12,
    UNARY_INVERT = 15,
    BINARY_MATRIX_MULTIPLY = 16,
    INPLACE_MATRIX_MULTIPLY = 17,
    BINARY_POWER = 19,
    BINARY_MULTIPLY = 20,
    BINARY_MODULO = 22,
    BINARY_ADD = 23,
    BINARY_SUBTRACT = 24,
    BINARY_SUBSCR = 25,
    BINARY_FLOOR_DIVIDE = 26,
    BINARY_TRUE_DIVIDE = 27,
    INPLACE_FLOOR_DIVIDE = 28,
    INPLACE_TRUE_DIVIDE = 29,
    GET_LEN = 30,
    MATCH_MAPPING = 31,
    MATCH_SEQUENCE = 32,
    MATCH_KEYS = 33,
    COPY_DICT_WITHOUT_KEYS = 34,
    WITH_EXCEPT_START = 49,
    GET_AITER = 50,
    GET_ANEXT = 51,
    BEFORE_ASYNC_WITH = 52,
    END_ASYNC_FOR = 54,
    INPLACE_ADD = 55,
    INPLACE_SUBTRACT = 56,
    INPLACE_MULTIPLY = 57,
    INPLACE_MODULO = 59,
    STORE_SUBSCR = 60,
    DELETE_SUBSCR = 61,
    BINARY_LSHIFT = 62,
    BINARY_RSHIFT = 63,
    BINARY_AND = 64,
    BINARY_XOR = 65,
    BINARY_OR = 66,
    INPLACE_POWER = 67,
    GET_ITER = 68,
    GET_YIELD_FROM_ITER = 69,
    PRINT_EXPR = 70,
    LOAD_BUILD_CLASS = 71,
    YIELD_FROM = 72,
    GET_AWAITABLE = 73,
    LOAD_ASSERTION_ERROR = 74,
    INPLACE_LSHIFT = 75,
    INPLACE_RSHIFT = 76,
    INPLACE_AND = 77,
    INPLACE_XOR = 78,
    INPLACE_OR = 79,
    LIST_TO_TUPLE = 82,
    RETURN_VALUE = 83,
    IMPORT_STAR = 84,
    SETUP_ANNOTATIONS = 85,
    YIELD_VALUE = 86,
    POP_BLOCK = 87,
    POP_EXCEPT = 89,
    STORE_NAME = 90,
    DELETE_NAME = 91,
    UNPACK_SEQUENCE = 92,
    FOR_ITER = 93,
    UNPACK_EX = 94,
    STORE_ATTR = 95,
    DELETE_ATTR = 96,
    STORE_GLOBAL = 97,
    DELETE_GLOBAL = 98,
    ROT_N = 99,
    LOAD_CONST = 100,
    LOAD_NAME = 101,
    BUILD_TUPLE = 102,
    BUILD_LIST = 103,
    BUILD_SET = 104,
    BUILD_MAP = 105,
    LOAD_ATTR = 106,
    COMPARE_OP = 107,
    IMPORT_NAME = 108,
    IMPORT_FROM = 109,
    JUMP_FORWARD = 110,
    JUMP_IF_FALSE_OR_POP = 111,
    JUMP_IF_TRUE_OR_POP = 112,
    JUMP_ABSOLUTE = 113,
    POP_JUMP_IF_FALSE = 114,
    POP_JUMP_IF_TRUE = 115,
    LOAD_GLOBAL = 116,
    IS_OP = 117,
    CONTAINS_OP = 118,
    RERAISE = 119,
    JUMP_IF_NOT_EXC_MATCH = 121,
    SETUP_FINALLY = 122,
    LOAD_FAST = 124,
    STORE_FAST = 125,
    DELETE_FAST = 126,
    GEN_START = 129,
    RAISE_VARARGS = 130,
    CALL_FUNCTION = 131,
    MAKE_FUNCTION = 132,
    BUILD_SLICE = 133,
    LOAD_CLOSURE = 135,
    LOAD_DEREF = 136,
    STORE_DEREF = 137,
    DELETE_DEREF = 138,
    CALL_FUNCTION_KW = 141,
    CALL_FUNCTION_EX = 142,
    SETUP_WITH = 143,
    EXTENDED_ARG = 144,
    LIST_APPEND = 145,
    SET_ADD = 146,
    MAP_ADD = 147,
    LOAD_CLASSDEREF = 148,
    MATCH_CLASS = 152,
    SETUP_ASYNC_WITH = 154,
    FORMAT_VALUE = 155,
    BUILD_CONST_KEY_MAP = 156,
    BUILD_STRING = 157,
    LOAD_METHOD = 160,
    CALL_METHOD = 161,
    LIST_EXTEND = 162,
    SET_UPDATE = 163,
    DICT_MERGE = 164,
    DICT_UPDATE = 165,
    INVALID_OPCODE,
}

impl GenericOpcode for Opcode {
    /// From (by removing relative jumps): https://github.com/python/cpython/blob/fdc9d214c01cb4588f540cfa03726bbf2a33fc15/Include/opcode.h#L149-L158
    fn is_absolute_jump(&self) -> bool {
        matches!(
            self,
            Opcode::JUMP_IF_FALSE_OR_POP
                | Opcode::JUMP_IF_TRUE_OR_POP
                | Opcode::JUMP_ABSOLUTE
                | Opcode::POP_JUMP_IF_FALSE
                | Opcode::POP_JUMP_IF_TRUE
                | Opcode::JUMP_IF_NOT_EXC_MATCH
        )
    }

    /// From: https://github.com/python/cpython/blob/fdc9d214c01cb4588f540cfa03726bbf2a33fc15/Include/opcode.h#L139-L148
    fn is_relative_jump(&self) -> bool {
        matches!(
            self,
            Opcode::FOR_ITER
                | Opcode::JUMP_FORWARD
                | Opcode::SETUP_FINALLY
                | Opcode::SETUP_WITH
                | Opcode::SETUP_ASYNC_WITH
        )
    }

    /// Relative or absolute jump
    fn is_jump(&self) -> bool {
        self.is_absolute_jump() | self.is_relative_jump()
    }
}

impl TryFrom<u8> for Opcode {
    type Error = crate::error::Error;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        Ok(match value {
            1 => Opcode::POP_TOP,
            2 => Opcode::ROT_TWO,
            3 => Opcode::ROT_THREE,
            4 => Opcode::DUP_TOP,
            5 => Opcode::DUP_TOP_TWO,
            6 => Opcode::ROT_FOUR,
            9 => Opcode::NOP,
            10 => Opcode::UNARY_POSITIVE,
            11 => Opcode::UNARY_NEGATIVE,
            12 => Opcode::UNARY_NOT,
            15 => Opcode::UNARY_INVERT,
            16 => Opcode::BINARY_MATRIX_MULTIPLY,
            17 => Opcode::INPLACE_MATRIX_MULTIPLY,
            19 => Opcode::BINARY_POWER,
            20 => Opcode::BINARY_MULTIPLY,
            22 => Opcode::BINARY_MODULO,
            23 => Opcode::BINARY_ADD,
            24 => Opcode::BINARY_SUBTRACT,
            25 => Opcode::BINARY_SUBSCR,
            26 => Opcode::BINARY_FLOOR_DIVIDE,
            27 => Opcode::BINARY_TRUE_DIVIDE,
            28 => Opcode::INPLACE_FLOOR_DIVIDE,
            29 => Opcode::INPLACE_TRUE_DIVIDE,
            30 => Opcode::GET_LEN,
            31 => Opcode::MATCH_MAPPING,
            32 => Opcode::MATCH_SEQUENCE,
            33 => Opcode::MATCH_KEYS,
            34 => Opcode::COPY_DICT_WITHOUT_KEYS,
            49 => Opcode::WITH_EXCEPT_START,
            50 => Opcode::GET_AITER,
            51 => Opcode::GET_ANEXT,
            52 => Opcode::BEFORE_ASYNC_WITH,
            54 => Opcode::END_ASYNC_FOR,
            55 => Opcode::INPLACE_ADD,
            56 => Opcode::INPLACE_SUBTRACT,
            57 => Opcode::INPLACE_MULTIPLY,
            59 => Opcode::INPLACE_MODULO,
            60 => Opcode::STORE_SUBSCR,
            61 => Opcode::DELETE_SUBSCR,
            62 => Opcode::BINARY_LSHIFT,
            63 => Opcode::BINARY_RSHIFT,
            64 => Opcode::BINARY_AND,
            65 => Opcode::BINARY_XOR,
            66 => Opcode::BINARY_OR,
            67 => Opcode::INPLACE_POWER,
            68 => Opcode::GET_ITER,
            69 => Opcode::GET_YIELD_FROM_ITER,
            70 => Opcode::PRINT_EXPR,
            71 => Opcode::LOAD_BUILD_CLASS,
            72 => Opcode::YIELD_FROM,
            73 => Opcode::GET_AWAITABLE,
            74 => Opcode::LOAD_ASSERTION_ERROR,
            75 => Opcode::INPLACE_LSHIFT,
            76 => Opcode::INPLACE_RSHIFT,
            77 => Opcode::INPLACE_AND,
            78 => Opcode::INPLACE_XOR,
            79 => Opcode::INPLACE_OR,
            82 => Opcode::LIST_TO_TUPLE,
            83 => Opcode::RETURN_VALUE,
            84 => Opcode::IMPORT_STAR,
            85 => Opcode::SETUP_ANNOTATIONS,
            86 => Opcode::YIELD_VALUE,
            87 => Opcode::POP_BLOCK,
            89 => Opcode::POP_EXCEPT,
            90 => Opcode::STORE_NAME,
            91 => Opcode::DELETE_NAME,
            92 => Opcode::UNPACK_SEQUENCE,
            93 => Opcode::FOR_ITER,
            94 => Opcode::UNPACK_EX,
            95 => Opcode::STORE_ATTR,
            96 => Opcode::DELETE_ATTR,
            97 => Opcode::STORE_GLOBAL,
            98 => Opcode::DELETE_GLOBAL,
            99 => Opcode::ROT_N,
            100 => Opcode::LOAD_CONST,
            101 => Opcode::LOAD_NAME,
            102 => Opcode::BUILD_TUPLE,
            103 => Opcode::BUILD_LIST,
            104 => Opcode::BUILD_SET,
            105 => Opcode::BUILD_MAP,
            106 => Opcode::LOAD_ATTR,
            107 => Opcode::COMPARE_OP,
            108 => Opcode::IMPORT_NAME,
            109 => Opcode::IMPORT_FROM,
            110 => Opcode::JUMP_FORWARD,
            111 => Opcode::JUMP_IF_FALSE_OR_POP,
            112 => Opcode::JUMP_IF_TRUE_OR_POP,
            113 => Opcode::JUMP_ABSOLUTE,
            114 => Opcode::POP_JUMP_IF_FALSE,
            115 => Opcode::POP_JUMP_IF_TRUE,
            116 => Opcode::LOAD_GLOBAL,
            117 => Opcode::IS_OP,
            118 => Opcode::CONTAINS_OP,
            119 => Opcode::RERAISE,
            121 => Opcode::JUMP_IF_NOT_EXC_MATCH,
            122 => Opcode::SETUP_FINALLY,
            124 => Opcode::LOAD_FAST,
            125 => Opcode::STORE_FAST,
            126 => Opcode::DELETE_FAST,
            129 => Opcode::GEN_START,
            130 => Opcode::RAISE_VARARGS,
            131 => Opcode::CALL_FUNCTION,
            132 => Opcode::MAKE_FUNCTION,
            133 => Opcode::BUILD_SLICE,
            135 => Opcode::LOAD_CLOSURE,
            136 => Opcode::LOAD_DEREF,
            137 => Opcode::STORE_DEREF,
            138 => Opcode::DELETE_DEREF,
            141 => Opcode::CALL_FUNCTION_KW,
            142 => Opcode::CALL_FUNCTION_EX,
            143 => Opcode::SETUP_WITH,
            144 => Opcode::EXTENDED_ARG,
            145 => Opcode::LIST_APPEND,
            146 => Opcode::SET_ADD,
            147 => Opcode::MAP_ADD,
            148 => Opcode::LOAD_CLASSDEREF,
            152 => Opcode::MATCH_CLASS,
            154 => Opcode::SETUP_ASYNC_WITH,
            155 => Opcode::FORMAT_VALUE,
            156 => Opcode::BUILD_CONST_KEY_MAP,
            157 => Opcode::BUILD_STRING,
            160 => Opcode::LOAD_METHOD,
            161 => Opcode::CALL_METHOD,
            162 => Opcode::LIST_EXTEND,
            163 => Opcode::SET_UPDATE,
            164 => Opcode::DICT_MERGE,
            165 => Opcode::DICT_UPDATE,
            _ => return Err(crate::error::Error::UnkownOpcode(value)),
        })
    }
}
